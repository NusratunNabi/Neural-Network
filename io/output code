import numpy as np
import pandas as pd
def activation(z):
    if z>=0.5:
        Y=1
    else:
        Y=0
    return Y
# Input Vector
X= np.array([[0,0],[0,1],[1,0],[1,1]])
# Weights and bias
W=np.array([0.3,0.1])
#b=0.56
#Target
T=np.array([0,1,1,1])
a=0.2
print("Input Vector:")
print(X)
print("Target Vector:")
print(T)
print("-----------------------------------------------------------")
print("Initial Weights: ",W)
#print("Initial Bias:",b)
print("------------------------------------------------------------")
T_vector=[0,1,1,1]
Y_vector=[]
i=0
while True:
    print("EPOCH: ",i)
   
    Data=[]
    for j in range(0,len(X)):
        #aggregation=(np.dot(W,X[j].T))+b
       
       # Y=activation(aggregation)
        Y_vector.append(Y)
        if Y != T[j] :
            deltaW=a*X[j]*T[j]
            W=W+deltaW
            #b=b+a*T[j]
        else:
            deltaW=[0,0]
       
        Data.append([X[j][0],X[j][1],T[j],round(aggregation,2),Y,W[0],W[1],deltaW[0],deltaW[1],a*T[j]])
   
    Final_Data= pd.DataFrame(Data,columns=['Step', 'X1', 'X2', 'Z', 'Y', 'W1', 'W2', 'delW1', 'delW2', 'delb'])
    print(Final_Data)   
    print("------------------------------------------------------------")
    i=i+1
    if Y_vector == T_vector:
        break
    Y_vector=[]
